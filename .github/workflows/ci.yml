name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Unit Tests
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-xcode16-spm-${{ hashFiles('**/Package.resolved', '**/Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-deriveddata-${{ hashFiles('**/*.xcodeproj/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-deriveddata-

      - name: Install dependencies
        run: |
          # Resolve Swift Package dependencies
          xcodebuild -resolvePackageDependencies -project Argus.xcodeproj

      - name: Build project
        run: |
          xcodebuild \
            -project Argus.xcodeproj \
            -scheme Argus \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
            -configuration Debug \
            build-for-testing

      - name: Run unit tests with coverage
        run: |
          xcodebuild test \
            -workspace Argus.xcworkspace \
            -scheme Argus \
            -testPlan TestPlan \
            -enableCodeCoverage YES \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
            -configuration Debug \
            -resultBundlePath TestResults.xcresult

      - name: Generate coverage report
        run: |
          xcrun xccov view TestResults.xcresult --report --json > coverage.json
          xcrun xccov view TestResults.xcresult --report > coverage.txt

      - name: Parse coverage summary
        id: coverage
        run: |
          # Extract overall coverage percentage from JSON
          COVERAGE=$(python3 -c "
          import json
          with open('coverage.json', 'r') as f:
              data = json.load(f)
              total_lines = 0
              covered_lines = 0
              for target in data['targets']:
                  if not target['name'].endswith('.xctest'):
                      total_lines += target['executableLines']
                      covered_lines += target['coveredLines']
              coverage = (covered_lines / total_lines) * 100 if total_lines > 0 else 0
              print(f'{coverage:.2f}')
          ")
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Overall Code Coverage: $COVERAGE%"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.json
            coverage.txt
            TestResults.xcresult
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/*.xcresult
          retention-days: 7
